<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>闲一文档</title><link>https://xianii.gitee.io/wedoc/</link><description>Recent content on 闲一文档</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://xianii.gitee.io/wedoc/index.xml" rel="self" type="application/rss+xml"/><item><title>ARM-GCC</title><link>https://xianii.gitee.io/wedoc/docs/tools/arm-gcc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://xianii.gitee.io/wedoc/docs/tools/arm-gcc/</guid><description>提供ARM GCC工具。
下载安装 Ubuntu sudo apt install gcc-arm-none-eabi
Windows 下载 https://developer.arm.com/tools-and-software/open-source-software/developer-tools/gnu-toolchain/gnu-rm/downloads 安装 直接安装，并将\bin目录添加进入环境变量PATH即可。 建议使用MSYS2安装。需要注意的是，在MSYS2中安装的工具链，要在MSYS2的MINGW终端中使用。</description></item><item><title>gdbgui[Linux]</title><link>https://xianii.gitee.io/wedoc/docs/tools/gdbgui/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://xianii.gitee.io/wedoc/docs/tools/gdbgui/</guid><description>官方在0.14.0.0版本移除了对windows的支持，windows用户可以自行摸索安装0.13.2.1之前的版本。
安装 安装依赖：sudo apt-get install gdb python3 官方推荐使用pipx安装，先安装pipx python3 -m pip install --user pipx python3 -m userpath append ~/.local/bin 重启终端以便刷新userpath 安装gdbgui：pipx install gdbgui</description></item><item><title>make[Win]</title><link>https://xianii.gitee.io/wedoc/docs/tools/gnu-make/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://xianii.gitee.io/wedoc/docs/tools/gnu-make/</guid><description>为Windows提供make工具。
GNU make是一个维护截止于2006年的项目，建议使用MSYS2来安装make工具链。
下载 http://gnuwin32.sourceforge.net/packages/make.htm 安装 直接安装，并将\bin目录添加进入环境变量PATH即可。</description></item><item><title>MSYS2[Win]</title><link>https://xianii.gitee.io/wedoc/docs/tools/msys2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://xianii.gitee.io/wedoc/docs/tools/msys2/</guid><description>MSYS2是一个Windows上的软件分发和构建平台。集合了许多用于软件构建的库和工具。
下载 https://www.msys2.org/ 安装完成后，打开MSYS2的终端，以下命令均需要在MSYS2的终端中使用。
首先，更换软件源，修改/msys64/etc/pacman.d中的三个mirrorlist文件，将国内源放到最前面。
重新打开msys终端，更新package库：pacman -Syu
如果主体需要更新，会要求关闭终端再重新打开，然后才能更新package：pacman -Su
其中:
&amp;gt; 静态库的路径为: msys2\usr\lib msys2\mingw64\lib &amp;gt; 头文件的路径为: msys2\usr\include msys2\mingw64\include 注意： 在MSYS2中安装的工具链，应当在MSYS2的MINGW终端中使用，否则会发生错误。
安装package GCC: pacman -S gcc make: pacman -S make ARM-GCC: pacman -S mingw-w64-x86_64-arm-none-eabi-gcc OpenOCD: pacman -S mingw-w64-x86_64-openocd 使用windows terminal https://www.msys2.org/docs/terminals/</description></item><item><title>nRF52开发笔记</title><link>https://xianii.gitee.io/wedoc/notes/nrf52note/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://xianii.gitee.io/wedoc/notes/nrf52note/</guid><description>nRF52从机发送缓冲区溢出报错 BLE从机发送缓冲区溢出会导致发送中断，并在下一次发送时发生断开。需要捕获和处理报错。
可以额外添加一级缓冲，并对超出缓冲区的部分做丢弃处理。
nRF52 广播包拼接 当m_advertising.adv_data.adv_data.len与其中EIR长度之和不等时，发生的解析错误可能将相邻广播包连接起来。
其机制还需进一步分析了解。
nRF52 蓝牙更新广播信息 使用ble_advertising_advdata_update更新广播信息时。
在广播开启时，更改内容实时生效，更改广播长度在下一次开启广播时生效
nRF52连接间隔与通信带宽问题 在CSW-V1上，在250ms连接间隔下，使用request方式通信只能达到2Hz左右的频率。 在CSW-V1上，在250ms连接间隔下，使用command方式通信，延迟在1-2个连接间隔。 在CSW-B5上，在250ms连接间隔下，使用command方式通信，延迟在几十ms之内，且在80ms内即返回了24个数据包。同时，测试功耗没有异常。 更改gap_conn_cfg.event_length至16可实现每个连接间隔可返回20+个数据包
gap_conn_cfg.event_length默认值为3，其为一个以1.25ms为单位的窗口时间，每个连接间隔能够通信的时长由这个窗口的时间决定。
蓝牙在有效距离内易断开 断开原因为:0x08(timeout)
考虑调整晶振精度参数，降低精度要求：比如从20ppm改为50ppm
参考资料： https://devzone.nordicsemi.com/f/nordic-q-a/29786/ble_hci_connection_timeout-and-nrf_clock_lf_xtal_accuracy_xx_ppm/118161#118161
nRF52接仿真器能运行接电源不能运行 可能原因有：
软件使能了 DCDC，但硬件未有外部 DCDC 电路。关闭 DCDC 可修复。 printf 重定向问题。Case ID: 207373 nRF52 FDS库在o2优化等级报错 问题： 在o2优化等级下，被写入的数据指针会有非 word 对齐的情况，此时会报错。
解决： 对需要使用 fds 写入的数据均使用强制 word 对齐。在 SES 中可使用__ALIGN(4)
nRF52 使用P0.21作为IO口 编译时更改
去掉CONFIG_GPIO_AS_PINRESET宏，重新完全编译。 使用nrfjrog -eraseuicr擦除 UICR 区域。因为使用 IDE 烧录是不会主动擦除 UICR 的，会导致 reset 引脚的配置没有改变。</description></item><item><title>OpenOCD</title><link>https://xianii.gitee.io/wedoc/docs/tools/openocd/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://xianii.gitee.io/wedoc/docs/tools/openocd/</guid><description>Ubuntu sudo apt install openocd
Windows 备选方案是使用MSYS2安装。需要注意的是，在MSYS2中安装的工具链，要在MSYS2的MINGW终端中使用。
使用MSYS2安装的openocd在windows上烧录时会报Error: couldn't bind gdb to socket: No error错误。
所以请使用windows的预编译二进制版本。
下载 http://openocd.org/getting-openocd/ 预编译二进制(win) https://gnutoolchains.com/arm-eabi/openocd/ https://github.com/xpack-dev-tools/openocd-xpack/releases 安装 直接安装，并将\bin目录添加进入环境变量PATH即可。</description></item><item><title>TDM-GCC[Win]</title><link>https://xianii.gitee.io/wedoc/docs/tools/tdm-gcc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://xianii.gitee.io/wedoc/docs/tools/tdm-gcc/</guid><description>为Windows提供GCC工具。
备选方案是使用MSYS2安装。需要注意的是，在MSYS2中安装的工具链，要在MSYS2的MINGW终端中使用。
下载 https://jmeubank.github.io/tdm-gcc/download/ 安装 安装完成后，将/bin目录添加进入环境变量PATH即可。</description></item><item><title>Zephyr-初探</title><link>https://xianii.gitee.io/wedoc/notes/zephyr/zephyrnote-0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://xianii.gitee.io/wedoc/notes/zephyr/zephyrnote-0/</guid><description>环境搭建 0. 环境安装 参照官方文档，在 WSL on windows 和 Ubuntu 系统均成立。
烧录工具 一些板子默认的烧录工具为 nrfjprog，访问nRF Command Line Tools安装
一些板子默认的烧录工具为 pyocd，如无意外，会在安装依赖时自动安装上。
手动则使用 pip3 install pyocd 来安装。安装时，可使用 pip3 install -i &amp;lt;src&amp;gt; 指定国内源提升速度。
pip国内源
阿里源: https://mirrors.aliyun.com/pypi/simple/
清华源: https://pypi.tuna.tsinghua.edu.cn/simple/
中科大源: https://pypi.mirrors.ustc.edu.cn/simple/
Ubuntu 下安装 nrfjprog
Ubuntu 下使用 ln -s &amp;lt;src&amp;gt; &amp;lt;des&amp;gt; 命令在 /sbin 创建 nrfjprog 的软链接 (注意 src 应当使用绝对路径)，支持安装 deb 包的系统可以直接使用 sudo dpkg -i &amp;lt;deb&amp;gt; 安装
WSL 环境下可能缺少依赖，需要手动安装 sudo apt install libtinfo5 libncurses5
使用 west init 的包可以拷贝至其他环境，避免重复下载耗费大量时间</description></item><item><title>Zephyr-涉水</title><link>https://xianii.gitee.io/wedoc/notes/zephyr/zephyrnote-1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://xianii.gitee.io/wedoc/notes/zephyr/zephyrnote-1/</guid><description>自定义 自定义板子 参考链接：https://docs.zephyrproject.org/latest/application/index.html#custom-board-definition
自定义板子有两种方式，一种是放到 zephyr/boards/arch/&amp;lt;board&amp;gt; 路径下，一种是放到项目的路径下 &amp;lt;project path&amp;gt;/boards/arch/&amp;lt;board&amp;gt;
前者将自定义的板子加入了 zephyr 的 device tree，直接通过 west build -b &amp;lt;board name&amp;gt; 命令，west 就能找到板子。
后者则需要指定板子定义的路径，但是可以避免污染原生环境：
west build -b &amp;lt;board name&amp;gt; -- -DBOARD_ROOT=${PWD}</description></item><item><title>备忘杂记</title><link>https://xianii.gitee.io/wedoc/notes/memo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://xianii.gitee.io/wedoc/notes/memo/</guid><description>windows terminal + oh-my-posh3 + theme 为win10配置windows terminal的主题。
当无法识别AllowPrerelease参数时，可能是因为PowershellGet版本太旧。
通过Get-module PowershellGet取得当前版本
通过Find-module PowershellGet取得最新版本
通过Install-Module PowershellGet -Force安装最新版本
安装 Install-Module posh-git -Scope CurrentUser
Install-Module oh-my-posh -AllowPrerelease -Scope CurrentUser
如遇魔女结界，则使用爱与魔法。
配置 使用notepad $PROFILE编辑powershell的配置文件，添加如下内容：
Import-Module posh-git Import-Module oh-my-posh Set-Theme Paradox 打开windows terminal的配置文件，为powershell添加如下配置，可以使得终端打开时的默认路径即为打开的目录。
&amp;#34;startingDirectory&amp;#34; : null 然后更改字体和颜色主题，可以直接添加到defaults里面，这样直接对所有终端都生效：
&amp;#34;fontFace&amp;#34;: &amp;#34;Monofurbold NF&amp;#34;, &amp;#34;colorScheme&amp;#34;:&amp;#34;Tango Dark&amp;#34; 其中，字体需要安装，地址见参考文献。
官方使用的字体是Meslo LGM NF，体积比较大(63.8Mb)。
这里选用的是微软出品的Cascadia Code PL体积比较小(7.8Mb)。
根据官方描述，任意的Nerd Font应当都是兼容的。可以在nerdfonts.com网站浏览。
参考文献: https://github.com/JanDeDobbeleer/oh-my-posh3 https://ohmyposh.dev/docs/ https://www.nerdfonts.com/ https://github.com/microsoft/cascadia-code/releases https://github.com/ryanoasis/nerd-fonts/releases/download/v2.1.0/Monofur.zip https://github.com/ryanoasis/nerd-fonts/releases/download/v2.1.0/Meslo.zip zsh + oh my zsh + theme 为Linux安装zsh shell并配置主题。</description></item><item><title>愛と魔法</title><link>https://xianii.gitee.io/wedoc/notes/magic/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://xianii.gitee.io/wedoc/notes/magic/</guid><description>代理魔法 Git 设置：
git config --global http.proxy http://127.0.0.1:1080 git config --global https.proxy https://127.0.0.1:1080 取消：
git config --global --unset http.proxy git config --global --unset https.proxy Linux shell 设置：
export http_proxy=http://127.0.0.1:1080 export https_proxy=https://127.0.0.1:1080 export https_proxy=&amp;quot;socks5://127.0.0.1:1080&amp;quot; 取消：
命令只对当前终端生效，重启终端即可 或者unset http_proxy Powershell $Env:http_proxy=&amp;quot;http://127.0.0.1:1080&amp;quot;; $Env:https_proxy=&amp;quot;http://127.0.0.1:1080&amp;quot; cmd 设置：
set http_proxy=http://127.0.0.1:1080 set https_proxy=http://127.0.0.1:1080 set http_proxy_user=user set http_proxy_pass=pass set https_proxy_user=user set https_proxy_pass=pass 取消：
set http_proxy= set https_proxy= 验证 由于 ping 不走代理，可以使用 curl -v https://www.</description></item></channel></rss>